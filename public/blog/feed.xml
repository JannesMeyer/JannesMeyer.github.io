<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Jannes Meyer's Blog</title>
	<link href="https://jannesmeyer.com/blog/feed.xml" rel="self" />
	<link href="https://jannesmeyer.com/" />
	<id>https://jannesmeyer.com/blog/feed.xml</id>
	<updated>2020-09-17T22:00:00.000Z</updated>
	<entry>
		<title>Configuring Wake-On-LAN</title>
		<link rel="alternate" type="text/html" href="https://jannesmeyer.com/blog/2020/wol"/>
		<id>https://jannesmeyer.com/blog/2020/wol</id>
		<updated>2020-09-17T22:00:00.000Z</updated>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				<p>Sometimes it&#39;s the little improvements in your workflow that give you the most satisfaction and you wonder why you hadn&#39;t made the change earlier. For me, configuring Wake-On-LAN (WOL) on my desktop PC has been one of those improvements.</p>
<p>It allows me to boot my PC on a schedule during weekdays and there are many mobile apps that allow you to send the wake command from your phone.</p>
<p><a name="continue"></a></p>
<h2 id="1-receiving-the-wake-command-bios">1. Receiving the Wake Command (BIOS)</h2>
<p>Some motherboards have a BIOS setting for enabling Wake-On-LAN. You can look for it under names such as <em>Resume on LAN, Wake-On-LAN, WOL, Power Management</em> or similar. However, it is also possible that your motherboard doesn&#39;t have a setting for this. In that case it&#39;s either not supported or it&#39;s always enabled. You will find out more soon enough, but you could also check your motherboard manufacturer&#39;s manual.</p>
<p>The next step is going to be specific to your operating system. I will describe my experience with Windows. If you use Linux or macOS, there are <a href="https://www.lifewire.com/wake-on-lan-4149800">handy guides</a> for those elsewhere on the internet. (<a href="#3-finding-the-network-adapters-mac-address">Jump to step 3</a> in that case)</p>
<h2 id="2-receiving-the-wake-command-windows">2. Receiving the Wake Command (Windows)</h2>
<p>The first step is to configure your network adapter. Just go to the Device Manager (<code class="hljs">Win+X</code> then <code class="hljs">M</code>, or run <code class="hljs">devmgmt.msc</code>) and choose the network adapter that you use for your network connection (usually Realtek or Intel).</p>
<p><img src="/images/blog/wol/devmgmt.png" alt="Windows Device Manager showing Intel network adapter as selected"></p>
<p>Double-click the network adapter and go to the <strong>Advanced</strong> tab. Here you have a list of settings for the driver. The one we are interested in is called <strong>Wake on Magic Packet</strong> near the bottom of the list. This needs to be set to <strong>Enabled</strong>.</p>
<p><img src="/images/blog/wol/womp.png" alt="Wake on Magic Packet: Enabled"></p>
<p>Next, you need to go to the <strong>Power Management</strong> tab and tick <strong>Allow this device to wake up the computer</strong>.</p>
<p><img src="/images/blog/wol/wakecomputer.png" alt="Power Management tab with the Wake Up setting highlighted"></p>
<p>Now that this is enabled, you should hopefully be able to start the PC with a WOL packet. But if it still doesn&#39;t work, there may be one more thing you can try.</p>
<p>I have an Asus motherboard with a network chip from Intel. Most people probably install the network driver that is provided by the OEM&#39;s website in the downloads section of their motherboard/computer. I originally had the Asus-provided driver installed, but apparently Asus decided it was a good idea to break the WOL feature on the Intel driver. This is rather confusing because I had no idea the OEMs even customise Intel&#39;s drivers.</p>
<p>What I had to do was to go to <a href="https://downloadcenter.intel.com/product/36773/Ethernet-Products">Intel&#39;s driver page</a> and download an unmodified version of the network driver.</p>
<p>Once I had the correct driver installed, the WOL feature started working immediately, but it&#39;s a good idea to make sure the driver installation did not reset the settings in the device manager.</p>
<p>Now you should be good to go for receiving the WOL packets.</p>
<h2 id="3-finding-the-network-adapters-mac-address">3. Finding the Network Adapter&#39;s MAC Address</h2>
<p>The next step is to figure out the MAC address of your network adapter. On Windows you can do it with the command <code class="hljs">ipconfig /all</code>.</p>
<p>Look for the <strong>Physical Address</strong> field on the adapter whose <strong>Description</strong> matches the name of your adapter:</p>
<p><img src="/images/blog/wol/ipconfig.png" alt="ipconfig output showing the MAC address"></p>
<p>On Linux and macOS, it works quite similar with the command <code class="hljs">ifconfig</code>.</p>
<h2 id="4-finding-the-networks-broadcast-address">4. Finding the Network&#39;s Broadcast Address</h2>
<p>Now the only thing left to do is to find the broadcast address of your network. It is defined as the last IPv4 address in your subnet. So you can easily derive it from your IP address and subnet mask.</p>
<p>If your IP address is <code class="hljs">192.168.1.3</code> and your subnet mask is <code class="hljs">255.255.255.0</code> then your broadcast address is <code class="hljs">192.168.1.255</code>.</p>
<h2 id="5-sending-the-wake-command">5. Sending the Wake Command</h2>
<p>On iOS there is an app called <a href="https://apps.apple.com/app/wake-me-up-wake-on-lan/id1465416032">Wake Me Up</a> which can send the &quot;magic&quot; network packet. This app is nice because it integrates with Apple&#39;s Shortcuts app, which means you can also send a WOL command in a shortcut.</p>
<p><img src="/images/blog/wol/wakemeup.png" alt="Wake Me Up app"></p>
<p>On other systems like a <a href="https://www.raspberrypi.org/">Raspberry Pi</a> or a NAS server I use this little Python script which I call <code class="hljs">wake.py</code>:</p>
<pre class="hljs"><span class="hljs-comment">#!/usr/bin/env python</span>
<span class="hljs-keyword">import</span> socket

mac = <span class="hljs-string">&#x27;\xAA\xBB\xCC\xDD\xEE\xFF&#x27;</span> <span class="hljs-comment"># Replace this with your MAC address</span>
broadcast_ip = <span class="hljs-string">&#x27;192.168.1.255&#x27;</span>   <span class="hljs-comment"># Replace this with your broadcast address</span>
port = <span class="hljs-number">9</span>

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="hljs-number">1</span>)
sock.sendto(<span class="hljs-string">&#x27;\xFF&#x27;</span> * <span class="hljs-number">6</span> + mac * <span class="hljs-number">16</span>, (broadcast_ip, port))</pre><p>Of course, this script needs to be customised with the addresses you obtained in steps 3 and 4. Leaving the port set to 9 should be fine, but you can also try port 7 or 0.</p>
<p>Now you can easily run it with your system&#39;s Python interpreter.</p>
<h2 id="final-notes">Final Notes</h2>
<p>I hope these steps were enough to get you up and running with WOL. Personally, I have configured my local NAS (any server will do) to run the Python script every working day around 10 minutes before I start working, so I always find my PC ready to go when I am working from home. If you don&#39;t have a server and are not looking to buy a Raspberry Pi, you might be able to get some use out <strong>Personal Automations</strong> in the Apple Shortcuts app, which can trigger an automation whenever you turn off your phone&#39;s alarm. Since iOS 14 you can even create automations that run fully in the background (turn off <strong>Ask Before Running</strong> when creating the automation).</p>
<p>Please let me know if you know anything else that should be mentioned in this article. Just send me an email at <a href="mailto:contact@jannesmeyer.com">contact@jannesmeyer.com</a>.</p>

			</div>
		</content>
		<author>
			<name>Jannes Meyer</name>
		</author>
	</entry>	<entry>
		<title>The JavaScript Taboo: Extending Built-In Objects</title>
		<link rel="alternate" type="text/html" href="https://jannesmeyer.com/blog/2015/extending-the-prototype-of-built-ins"/>
		<id>https://jannesmeyer.com/blog/2015/extending-the-prototype-of-built-ins</id>
		<updated>2015-05-17T22:00:00.000Z</updated>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				<p>It is common knowledge that modifying the prototype of built-in JavaScript objects (<code class="hljs">Array</code>, <code class="hljs">String</code>, <code class="hljs">HTMLElement</code>, etc.) is a bad idea.</p>
<p><a href="https://en.wikipedia.org/wiki/Prototype_JavaScript_Framework">Prototype.js</a>, one of the first popular JavaScript frameworks of the AJAX era, made heavy use of extending the DOM, but then came jQuery and pretty much killed it, because it wrapped everything in <code class="hljs">$()</code> instead of extending prototypes, which is safer in terms of compatibility with other libraries and browser updates.</p>
<p><a name="continue"></a></p>
<blockquote>
<p>DOM extension is one of the biggest mistakes Prototype.js has ever done.</p>
<footer>Kangax (of Prototype Core), <cite><a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/">What's wrong with extending the DOM</a></cite></footer>
</blockquote>
<p>Since then it has been a taboo to extend the prototype of built-in objects and the language feature has been largely forgotten and replaced by the much slower process of adding new methods through standardization, which takes much longer and only covers the most generic use-cases.</p>
<p>Look at these two made-up examples and tell me which one is easier to read:</p>
<pre class="hljs"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];

<span class="hljs-comment">// Using a function</span>
includes(numbers, <span class="hljs-number">8</span>);

<span class="hljs-comment">// Using Array.prototype.includes</span>
numbers.includes(<span class="hljs-number">8</span>);</pre><p>Are we eternally condemned to a future where our JavaScript code looks like the first example? Sure, ES6 defines <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes</a>, but what about cases where we want to provide our own functions?</p>
<p>The problem is, of course, that prototype extensions are <strong>global</strong>. But JavaScript has come a long way since its inception and a lot of its “bad parts” are being fixed. So why don&#39;t we fix this one as well and standardize <strong>local</strong> prototype extensions? It could look like this, for example:</p>
<pre class="hljs"><span class="hljs-keyword">import</span> <span class="hljs-built_in">Array</span>.{ first } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;array-extensions&#x27;</span>;

<span class="hljs-comment">// Importing every named export (use with care)</span>
<span class="hljs-keyword">import</span> <span class="hljs-built_in">Array</span>.* <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;array-extensions&#x27;</span>;

<span class="hljs-comment">// Polyfills would continue to work through imports with side-effects</span>
<span class="hljs-comment">// to not overshadow existing implementations:</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;array-polyfills&#x27;</span>;

<span class="hljs-comment">// Let&#x27;s use our fancy new Array method</span>
<span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];
numbers.first(); <span class="hljs-comment">// 4</span></pre><p>Of course this is not backwards compatible. But maybe it can be transpiled. How could we translate the above snippet to ES5, for example?</p>
<p>If we know for sure that the variable will always be an Array and never change its type (which is not guaranteed by JavaScript as a dynamically-typed languages, unfortunately) we could rewrite it like in the following snippet.</p>
<p>Tools like TypeScript and Flow could help to ensure type-safety. (It&#39;s funny that JavaScript is starting to move towards static typing. ActionScript introduced optional static typing 12 years ago.)</p>
<pre class="hljs"><span class="hljs-keyword">var</span> first = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;array-extensions&#x27;</span>).first;

<span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];
first.call(numbers); <span class="hljs-comment">// 4</span></pre><p>That this concept works is proven by things like <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">categories in Objective-C</a>. Such a category makes it possible to add methods to an existing class, even if it is a class from a framework and you don&#39;t have the code for it. The category&#39;s methods are only available <strong>locally</strong> – like it should be – in source files that have included it.</p>
<p>One of my favourite examples of this is how AFNetworking adds <a href="https://github.com/AFNetworking/AFNetworking/blob/583742a539f596f98c10953d8aa8ae260cf18d2a/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.m#L113"><code class="hljs">setImageWithURL:placeholderImage:</code></a> to the Apple-provided <code class="hljs">UIImageView</code> class for asynchronous image loading and caching from the web. No subclassing required.</p>
<pre class="hljs"><span class="hljs-built_in">NSURL</span>* url = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@&quot;http://example.com/image.png&quot;</span>]

[imageView setImageWithURL:url
          placeholderImage:[<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;placeholder.png&quot;</span>]];</pre><p>Apple even uses categories extensively in their own libraries. For example, UIKit adds a lot of convenience methods to the more basic Foundation classes (<code class="hljs">NSArray</code>, <code class="hljs">NSString</code>, …).</p>
<p>Let&#39;s hope we can fix JavaScript prototype extension of built-ins and convert it into another “Good Part”.</p>
<h3 id="see-also">See also</h3>
<ul>
<li><a href="https://johnresig.com/blog/getelementsbyclassname-pre-prototype-16/">getElementsByClassName pre Prototype 1.6</a>, 2008, John Resig</li>
<li><a href="https://humanwhocodes.com/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/">Maintainable JavaScript: Don’t modify objects you don’t own</a>, 2010, Nicholas C. Zakas</li>
<li><a href="http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/">Extending native DOM prototypes without collisions</a>, 2015, Lea Verou</li>
</ul>
<p><a href="https://news.ycombinator.com/item?id=9565105">HN comments</a></p>

			</div>
		</content>
		<author>
			<name>Jannes Meyer</name>
		</author>
	</entry>	<entry>
		<title>The Perils of Function Scoping</title>
		<link rel="alternate" type="text/html" href="https://jannesmeyer.com/blog/2015/perils-of-function-scoping"/>
		<id>https://jannesmeyer.com/blog/2015/perils-of-function-scoping</id>
		<updated>2015-05-16T22:00:00.000Z</updated>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				<p>As you probably know, block-scoping using <code class="hljs">let</code> is being introduced in the ECMAScript 6 standard. But why is this even neccesary? A lot of people seem confused about this.</p>
<p>Should we go ahead and replace every occurence of <code class="hljs">var</code> with <code class="hljs">let</code> now?</p>
<p>Let&#39;s analyze the situation.</p>
<p><a name="continue"></a></p>
<h2 id="the-problem">The Problem</h2>
<p>One of the problems with function scoping is that you don&#39;t automatically fall into the <a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/">pit of success</a> when you are dealing with asynchronous function calls. </p>
<p>Let&#39;s say we have an array of filenames and we want to do some asynchronous operation in a node.js environment with them.</p>
<pre class="hljs"><span class="hljs-keyword">var</span> files = [
  <span class="hljs-string">&#x27;Photo 1.jpg&#x27;</span>,
  <span class="hljs-string">&#x27;Photo 2.jpg&#x27;</span>,
  <span class="hljs-string">&#x27;Photo 3.jpg&#x27;</span>
];</pre><p>In this example we are interested in the result of <code class="hljs">fs.stat</code> for each of those files. So we iterate through the array using a <code class="hljs">for</code> loop and call the function with a callback:</p>
<pre class="hljs"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.length; ++i) {
  <span class="hljs-keyword">var</span> file = files[i];

  fs.stat(file, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">err, stats</span>) </span>{
    <span class="hljs-built_in">console</span>.log(file);
  });
}</pre><p>And here comes the output of this fabulous script:</p>
<pre class="hljs">Photo 3.jpg
Photo 3.jpg
Photo 3.jpg</pre><p>Oops, how did that happen? The callback function keeps a closure of the <code class="hljs">file</code> variable and then the value of that <em>one</em> variable is reassigned on every iteration of the loop. So the problem is, that we have <em>three</em> closures of the same variable instead of <em>three</em> closures to separate variables.</p>
<h2 id="a-possible-solution-let">A Possible Solution: <code class="hljs">let</code></h2>
<p>Luckily we heard about this crazy new thing in JavaScript called <code class="hljs">let</code> which gives us block-scoping:</p>
<pre class="hljs"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.length; ++i) {
  <span class="hljs-keyword">let</span> file = files[i];
<span class="hljs-comment">// ^--- the only change</span>
  fs.stat(file, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">err, stats</span>) </span>{
    <span class="hljs-built_in">console</span>.log(file);
  });
}</pre><p>Now the iteration works as expected:</p>
<pre class="hljs">Photo 1.jpg
Photo 2.jpg
Photo 3.jpg</pre><h2 id="another-solution-arrayprototypeforeach">Another Solution: <code class="hljs">Array.prototype.forEach</code></h2>
<p>On first sight, using a <code class="hljs">for</code> loop and and a <code class="hljs">Array.prototype.forEach</code> construct for array iteration might seem identical in behavior, but they actually differ slightly: The <code class="hljs">forEach</code> approach gives you a new scope on every iteration. Whereas an ordinary <code class="hljs">for</code> loop takes place inside of the same scope during the complete iteration.</p>
<pre class="hljs">files.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">file</span>) </span>{
  fs.stat(file, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">err, stats</span>) </span>{
    <span class="hljs-built_in">console</span>.log(file);
  });
});</pre><p>And we get the correct output as well.</p>
<h2 id="so-should-i-use-let-for-everything-now">So, should I use <code class="hljs">let</code> for everything now?</h2>
<p>First of all, not all JavaScript runtimes support <code class="hljs">let</code>  yet (node.js, IE&lt;11 and Safari are the biggest blockers currently), so you have to use transpilation which comes with a small cost.</p>
<p>With the Babel transpiler (v5.4.3) the first solution from above is translated to a function that is invoked on every iteration:</p>
<pre class="hljs"><span class="hljs-keyword">var</span> _loop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> file = files[i];
  fs.stat(file, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">err, stats</span>) </span>{
    <span class="hljs-built_in">console</span>.log(file);
  });
};

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.length; ++i) {
  _loop();
}</pre><p>This is a great solution performance-wise and, as a consequence, there is no reason to not replace every instance of <code class="hljs">var</code> with <code class="hljs">let</code> even in large codebases if you are willing to use Babel or you are only targeting environments like io.js or Firefox/Chrome/IE11 which support the <code class="hljs">let</code> statement natively.</p>
<p><a href="https://news.ycombinator.com/item?id=9562506">HN comments</a></p>

			</div>
		</content>
		<author>
			<name>Jannes Meyer</name>
		</author>
	</entry>

</feed>